import { Vector3, Vector4 } from '@babylonjs/core';
export declare const swapMatrixOrder: (numbers: ArrayLike<number>) => number[];
export declare const getTranslation: (numbers: ArrayLike<number>) => Vector3;
export declare const scaleTranslation: (numbers: number[], scale: number, scaleY?: number, scaleZ?: number) => number[];
export declare const incrementTranslation: (numbers: number[], x: number, y: number, z: number) => number[];
export declare const getRowVec4: (numbers: ArrayLike<number>, rowIndex: number) => Vector4;
export declare const getRowVec3: (numbers: ArrayLike<number>, rowIndex: number) => Vector3;
export declare const getColVec4: (numbers: ArrayLike<number>, colIndex: number) => Vector4;
export declare const getColVec3: (numbers: ArrayLike<number>, colIndex: number) => Vector3;
export declare const scaleMatrix: (numbers: number[], scale: number) => number[];
export declare const scaleRow4: (numbers: number[], rowIndex: number, scale: number) => number[];
export declare const scaleRow3: (numbers: number[], rowIndex: number, scale: number) => number[];
export declare const cloneArray: <T>(array: ArrayLike<T>) => T[];
export declare const centerModulo: (x: number, base: number) => number;
export declare const round: (x: number, base: number) => number;
export declare const matrixToString: (m: ArrayLike<number>) => string;
export declare const toString: (value: unknown) => string;
export declare const utils: {
    swapMatrixOrder: (numbers: ArrayLike<number>) => number[];
    getTranslation: (numbers: ArrayLike<number>) => Vector3;
    scaleTranslation: (numbers: number[], scale: number, scaleY?: number, scaleZ?: number) => number[];
    incrementTranslation: (numbers: number[], x: number, y: number, z: number) => number[];
    getRowVec4: (numbers: ArrayLike<number>, rowIndex: number) => Vector4;
    getRowVec3: (numbers: ArrayLike<number>, rowIndex: number) => Vector3;
    getColVec4: (numbers: ArrayLike<number>, colIndex: number) => Vector4;
    getColVec3: (numbers: ArrayLike<number>, colIndex: number) => Vector3;
    scaleRow4: (numbers: number[], rowIndex: number, scale: number) => number[];
    scaleRow3: (numbers: number[], rowIndex: number, scale: number) => number[];
    scaleMatrix: (numbers: number[], scale: number) => number[];
    cloneArray: <T>(array: ArrayLike<T>) => T[];
    centerModulo: (x: number, base: number) => number;
    round: (x: number, base: number) => number;
    toString: (value: unknown) => string;
};
